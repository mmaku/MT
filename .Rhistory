plotCovariance(as.matrix(stars$opt.icov))
plotCovariance(as.matrix(mb.stars$opt.icov))
plotCovariance(as.matrix(npn.stars$opt.icov))
plotCovariance(solve(cov(X)))
plotCovariance(solve(cov(X.pow)))
plotCovariance(solve(cov(X.npn)))
data(stockdata)                                           # Load the stock data
Y = log(stockdata$data[2:1258,]/stockdata$data[1:1257,])  # Preprocessing
Y.npn = huge.npn(Y, npn.func="truncation")                # Nonparanormal
out.npn = huge(Y.npn,method = "glasso", nlambda=40,lambda.min.ratio = 0.4)
out = huge(Y,method = "glasso", nlambda=40,lambda.min.ratio = 0.4)
n     <- nrow(Y)
p     <- ncol(Y)
m     <- p*(p-1)/2
alpha <- 0.05
k = 1:m
lambdaBis <- qt(1-alpha*k/2/m, df = n-2)/sqrt(n-2+qt(1-alpha*k/2/m, df = n-2)^2)
lambdaSeries <- c(rep(lambdaBis[1], p), rep(lambdaBis, each=2))
stock.gslope <- gslopeADMM(cov(Y), lambda = lambdaSeries)$precisionMatrix
lambdaSeries
Y
n
p
m
lambdaBis
data(stockdata)                                           # Load the stock data
Y = log(stockdata$data[2:1258,]/stockdata$data[1:1257,])  # Preprocessing
Y.npn = huge.npn(Y, npn.func="truncation")                # Nonparanormal
out.npn = huge(Y.npn,method = "glasso", nlambda=40,lambda.min.ratio = 0.4)
out = huge(Y,method = "glasso", nlambda=40,lambda.min.ratio = 0.4)
n     <- nrow(Y)
p     <- ncol(Y)
m     <- p*(p-1)/2
alpha <- 0.05
k = 1:m
lambdaBis <- qt(1-alpha*k/2/m, df = n-2)/sqrt(n-2+qt(1-alpha*k/2/m, df = n-2)^2)
lambdaSeries <- c(rep(lambdaBis[1], p), rep(lambdaBis, each=2))
stock.gslope <- gslopeADMM(cov(Y), lambda = lambdaSeries)$precisionMatrix
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
stock.gslope <- gslopeADMM(cov(Y), lambda = lambdaSeries)$precisionMatrix
stock.gslope.npn <- gslopeADMM(cov(Y.npn), lambda = lambdaSeries)$precisionMatrix
plotCovariance(as.matrix(out.npn$icov[[1]]))
plotCovariance(as.matrix(out$icov[[1]]))
plotCovariance(stock.gslope)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
plotCovariance(precisionGSLOPEADMM.hug)
plotCovariance(precisionGSLOPEADMM.pow)
plotCovariance(precisionGSLOPEADMM.npn)
plotCovariance(precisionGSLOPEADMMsmallAlpha.hug)
plotCovariance(precisionGSLOPEADMMsmallAlpha.pow)
plotCovariance(precisionGSLOPEADMMsmallAlpha.npn)
plotCovariance(as.matrix(stars$opt.icov))
plotCovariance(as.matrix(mb.stars$opt.icov))
plotCovariance(as.matrix(npn.stars$opt.icov))
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
plotCovariance(clprecisionGSLOPEADMM.hug)
clL = huge.generator(n=200,d=50,graph="cluster") # Generate data with hub structures
clX = scale(clL$data)
clX.pow = clX^3/sqrt(15)
clX.npn = huge.npn(clX.pow)
clout = huge(X,nlambda=30., method = "glasso")
clout.mb = huge(X.pow,nlambda=30, method = "glasso") # Estimate the solution path
clout.npn = huge(X.npn,nlambda=30, method = "glasso")
clstars = huge.select(clout,criterion="stars", stars.thresh=0.05) # Select the graph using StARS
clmb.stars = huge.select(clout.mb,criterion="stars", stars.thresh=0.05)
clnpn.stars = huge.select(clout.npn,criterion="stars",stars.thresh=0.05)
cln     <- nrow(L$data)
clp     <- ncol(L$data)
clm     <- p*(p-1)/2
clalpha <- 0.05
clk = 1:clm
cllambdaBis <- qt(1-clalpha*clk/2/clm, df = cln-2)/sqrt(cln-2+qt(1-clalpha*clk/2/clm, df = cln-2)^2)
cllambdaSeries <- c(rep(cllambdaBis[1], clp), rep(lclambdaBis, each=2))
precisionGSLOPEADMM.hug <- gslopeADMM(cov(clX), lambda = cllambdaSeries)$precisionMatrix
precisionGSLOPEADMM.pow <- gslopeADMM(cov(clX.pow), lambda = cllambdaSeries)$precisionMatrix
precisionGSLOPEADMM.npn <- gslopeADMM(cov(clX.npn), lambda = cllambdaSeries)$precisionMatrix
alphaSmall <- 0.01
lambdaCis <- qt(1-alphaSmall*k/2/m, df = n-2)/sqrt(n-2+qt(1-alphaSmall*k/2/m, df = n-2)^2)
lambdaSeriesCis <- c(rep(lambdaCis[1], p), rep(lambdaCis, each=2))
precisionGSLOPEADMMsmallAlpha.hug <- gslopeADMM(cov(clX), lambda = lambdaSeriesCis)$precisionMatrix
precisionGSLOPEADMMsmallAlpha.pow <- gslopeADMM(cov(clX.pow), lambda = lambdaSeriesCis)$precisionMatrix
precisionGSLOPEADMMsmallAlpha.npn <- gslopeADMM(cov(clX.npn), lambda = lambdaSeriesCis)$precisionMatrix
clX.npn = huge.npn(clX.pow)
clX = scale(clL$data)
clX.pow = clX^3/sqrt(15)
clL = huge.generator(n=200,d=50,graph="cluster") # Generate data with hub structures
clX = scale(clL$data)
clX.pow = clX^3/sqrt(15)
clX.npn = huge.npn(clX.pow)
clout = huge(X,nlambda=30., method = "glasso")
clout.mb = huge(X.pow,nlambda=30, method = "glasso") # Estimate the solution path
clout.npn = huge(X.npn,nlambda=30, method = "glasso")
clstars = huge.select(clout,criterion="stars", stars.thresh=0.05) # Select the graph using StARS
clmb.stars = huge.select(clout.mb,criterion="stars", stars.thresh=0.05)
clnpn.stars = huge.select(clout.npn,criterion="stars",stars.thresh=0.05)
cln     <- nrow(L$data)
clp     <- ncol(L$data)
clm     <- p*(p-1)/2
clalpha <- 0.05
clk = 1:clm
cllambdaBis <- qt(1-clalpha*clk/2/clm, df = cln-2)/sqrt(cln-2+qt(1-clalpha*clk/2/clm, df = cln-2)^2)
cllambdaSeries <- c(rep(cllambdaBis[1], clp), rep(cllambdaBis, each=2))
precisionGSLOPEADMM.hug <- gslopeADMM(cov(clX), lambda = cllambdaSeries)$precisionMatrix
precisionGSLOPEADMM.pow <- gslopeADMM(cov(clX.pow), lambda = cllambdaSeries)$precisionMatrix
precisionGSLOPEADMM.npn <- gslopeADMM(cov(clX.npn), lambda = cllambdaSeries)$precisionMatrix
alphaSmall <- 0.01
lambdaCis <- qt(1-alphaSmall*k/2/m, df = n-2)/sqrt(n-2+qt(1-alphaSmall*k/2/m, df = n-2)^2)
lambdaSeriesCis <- c(rep(lambdaCis[1], p), rep(lambdaCis, each=2))
precisionGSLOPEADMMsmallAlpha.hug <- gslopeADMM(cov(clX), lambda = lambdaSeriesCis)$precisionMatrix
precisionGSLOPEADMMsmallAlpha.pow <- gslopeADMM(cov(clX.pow), lambda = lambdaSeriesCis)$precisionMatrix
precisionGSLOPEADMMsmallAlpha.npn <- gslopeADMM(cov(clX.npn), lambda = lambdaSeriesCis)$precisionMatrix
plotCovariance(clprecisionGSLOPEADMM.hug)
Q
clprecisionGSLOPEADMM.hug <- gslopeADMM(cov(clX), lambda = cllambdaSeries)$precisionMatrix
clprecisionGSLOPEADMM.pow <- gslopeADMM(cov(clX.pow), lambda = cllambdaSeries)$precisionMatrix
clprecisionGSLOPEADMM.npn <- gslopeADMM(cov(clX.npn), lambda = cllambdaSeries)$precisionMatrix
clprecisionGSLOPEADMMsmallAlpha.hug <- gslopeADMM(cov(clX), lambda = lambdaSeriesCis)$precisionMatrix
clprecisionGSLOPEADMMsmallAlpha.pow <- gslopeADMM(cov(clX.pow), lambda = lambdaSeriesCis)$precisionMatrix
clprecisionGSLOPEADMMsmallAlpha.npn <- gslopeADMM(cov(clX.npn), lambda = lambdaSeriesCis)$precisionMatrix
plotCovariance(clprecisionGSLOPEADMM.hug)
plotCovariance(as.matrix(clstars$opt.icov))
plotCovariance(clprecisionGSLOPEADMM.pow)
plotCovariance(as.matrix(clmb.stars$opt.icov))
plotCovariance(clprecisionGSLOPEADMMsmallAlpha.hug)
plotCovariance(as.matrix(clstars$opt.icov))
plotCovariance(as.matrix(clmb.stars$opt.icov))
plotCovariance(as.matrix(clnpn.stars$opt.icov))
plotCovariance(solve(cov(clX)))
plotCovariance(solve(cov(clX.pow)))
plotCovariance(solve(cov(clX.npn)))
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
cov(data)
solve(cov(data))
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/04 admmGLASSO.R', echo=TRUE)
cov(data)
solve(cov(data))
try(solve(cov(data)))
try(solve(cov(data)), silent = T)
try(X = solve(cov(data)), silent = T)
try(X <- solve(cov(data)), silent = T)
X
X <- matrix(0, nrow= 10, ncol = 10)
try(X <- solve(cov(data)), silent = T)
X
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
ggsave("firstBench_0.1_F_T.png", plotBenchOne(firstBench_0.1_F_T), device = "png", path = "./00 Plots/01 first/", dpi = 200)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
ggsave("firstBench_0.1_F_T.png", plotBenchOne(firstBench_0.1_F_T), device = "png", path = "./00 Plots/01 first/", dpi = 200)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
require(MASS)
require(glasso)
require(huge)
require(tictoc)
for(mu in seq(from = 0.5, to = 10))
{
tic(mu)
toc(mu)
}
for(mu in seq(from = 0.5, to = 19))
{
tic(mu)
toc(mu)
}
require(MASS)
require(glasso)
require(huge)
require(tictoc)
source("04 admmGLASSO.R")
source("01 auxilaryFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
tic("total")
for(mu in seq(from = 1, to = 20))
{
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
tic("total")
for(mu in seq(from = ,1, to = 2, length.out = 25))
{
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
toc("total")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
toc("total")
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, truncate = F)
toc(mu)
}
toc("total")
absoluteEpsilon = 1e-4
(1/absoluteEpsilon)%/%10
(1/absoluteEpsilon)%%10
(1/absoluteEpsilon)
log10( (1/absoluteEpsilon))
round(log10( (1/absoluteEpsilon)))
source("04 admmGLASSO.R")
source("01 auxilaryFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
tic("total")
for(mu in seq(from = .5, to = .9, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
banerjeeLassoLambda <- round(banerjeeLassoLambda, digits = 5)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, truncate = F)
toc()
}
toc()
tic("total")
for(mu in seq(from = .5, to = .9, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
toc()
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/04 admmGLASSO.R', echo=TRUE)
sampleCovariance <- matrix(0, 5, 5)
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
penalizeDiagonal = TRUE
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
entriesNumber
penalizeDiagonal = F
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
entriesNumber
entries <- sampleCovariance[lower.tri(sampleCovariance, penalizeDiagonal)]
length(entries)
penalizeDiagonal = T
length(entries)
entries <- sampleCovariance[lower.tri(sampleCovariance, penalizeDiagonal)]
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
length(entries)
entriesNumber
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/06 OWL1prox.R', echo=TRUE)
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
data = scale(huge.generator(n=400, d=100, graph="hub")$data) # Generate data with hub structures
tic("total")
for(mu in seq(from = .5, to = .9, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
toc()
tic("total")
for(mu in seq(from = 1, to = 2, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
tic("total")
for(mu in seq(from = 1, to = 2.1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
data = scale(huge.generator(n=200, d=200, graph="cluster")$data) # Generate data with hub structures
tic("total")
for(mu in seq(from = .4, to = 1.5, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
toc()
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
thirdClusterBench__0.05_F_T <- benchOne(data)
thirdClusterBench__0.05_F_T_ric <- benchOne(data, selectCriterion = "ric")
thirdClusterBench__0.05_F_T_ebic <- benchOne(data, selectCriterion = "ebic")
plotBenchOne(thirdClusterBench__0.1_F_T)
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
firstBench_0.05_F_T <- benchOne(data)
firstBench_0.05_F_T_ric <- benchOne(data, selectCriterion = "ric")
firstBench_0.05_F_T_ebic <- benchOne(data, selectCriterion = "ebic")
ggsave("firstBench_0.05_F_T.png", plotBenchOne(firstBench_0.05_F_T), device = "png", path = "./00 Plots/01 first/01 criterion/", dpi = 200)
ggsave("firstBench_0.05_F_T_ric.png", plotBenchOne(firstBench_0.05_F_T_ric), device = "png", path = "./00 Plots/01 first/01 criterion/", dpi = 200)
ggsave("firstBench_0.05_F_T_ebic.png", plotBenchOne(firstBench_0.05_F_T_ebic), device = "png", path = "./00 Plots/01 first/01 criterion/", dpi = 200)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
data
str(data)
data = scale(huge.generator(n=400, d=100, graph="hub")$data) # Generate data with hub structures
data
str(data)
data = scale(huge.generator(n=100, d=400, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1, selectCriterion = "ebic")
plotBenchOne(secondHubBench_0.1_F_T)
data = scale(huge.generator(n=75, d=150, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1, selectCriterion = "ebic")
plotBenchOne(secondHubBench_0.1_F_T)
data = scale(huge.generator(n=75, d=100, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1, selectCriterion = "ebic")
plotBenchOne(secondHubBench_0.1_F_T)
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1)
plotBenchOne(secondHubBench_0.1_F_T)
data = scale(huge.generator(n=75, d=100, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1)
secondHubBench_0.1_F_F <- benchOne(data, alpha = .1, truncate = F)
secondHubBench_0.1_T_T <- benchOne(data, alpha = .1, penalizeDiagonal = T)
secondHubBench_0.1_T_F <- benchOne(data, alpha = .1, truncate = F, penalizeDiagonal = T)
secondHubBench_0.05_F_T <- benchOne(data)
secondHubBench_0.05_F_F <- benchOne(data, truncate = F)
secondHubBench_0.05_T_T <- benchOne(data, penalizeDiagonal = T)
secondHubBench_0.05_T_F <- benchOne(data, truncate = F, penalizeDiagonal = T)
secondHubBench_0.01_F_T <- benchOne(data, alpha = .01)
secondHubBench_0.01_F_F <- benchOne(data, alpha = .01, truncate = F)
secondHubBench_0.01_T_T <- benchOne(data, alpha = .01, penalizeDiagonal = T)
secondHubBench_0.01_T_F <- benchOne(data, alpha = .01, truncate = F, penalizeDiagonal = T)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_F.png", plotBenchOne(secondHubBench_0.1_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_F.png", plotBenchOne(secondHubBench_0.1_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_T.png", plotBenchOne(secondHubBench_0.1_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_T.png", plotBenchOne(secondHubBench_0.05_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_F.png", plotBenchOne(secondHubBench_0.05_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_F.png", plotBenchOne(secondHubBench_0.05_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_T.png", plotBenchOne(secondHubBench_0.05_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_T.png", plotBenchOne(secondHubBench_0.01_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_F.png", plotBenchOne(secondHubBench_0.01_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_F.png", plotBenchOne(secondHubBench_0.01_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_T.png", plotBenchOne(secondHubBench_0.01_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
plotBenchOne(secondHubBench_0.1_F_T)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "jpg", path = "./00 Plots/02 second/", dpi = 200)
plotBenchOne(secondHubBench_0.1_F_T)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_T.png", plotBenchOne(secondHubBench_0.05_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_T.png", plotBenchOne(secondHubBench_0.01_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_T.png", plotBenchOne(secondHubBench_0.1_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_T.png", plotBenchOne(secondHubBench_0.05_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_T.png", plotBenchOne(secondHubBench_0.01_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_F.png", plotBenchOne(secondHubBench_0.1_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_F.png", plotBenchOne(secondHubBench_0.1_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_T.png", plotBenchOne(secondHubBench_0.1_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_T.png", plotBenchOne(secondHubBench_0.05_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_F.png", plotBenchOne(secondHubBench_0.05_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_F.png", plotBenchOne(secondHubBench_0.05_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_T.png", plotBenchOne(secondHubBench_0.05_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_T.png", plotBenchOne(secondHubBench_0.01_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_F.png", plotBenchOne(secondHubBench_0.01_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_F.png", plotBenchOne(secondHubBench_0.01_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_T.png", plotBenchOne(secondHubBench_0.01_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
require(MASS)
require(glasso)
install.packages("glasso")
install.packages("SLOPE")
c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)
count(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)    )
len(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)    )
length(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)    )
x <- matrix(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5), nrow = 4, ncol = 4)
x
T(x)
t(x)
t(x)[x == 0]
x <- matrix(c(1,2,3,0,0,1,2,3,4,0,0,4,2,2,4,5), nrow = 4, ncol = 4)
t(x)[x == 0]
t(x)[x == 0] == 0
sum(t(x)[x == 0] == 0)
sum(t(x)[x == 0] != 0)
