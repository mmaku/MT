bindedResults$SNR <- as.factor(bindedResults$SNR)
bindedResults$SNR
load("./!02 Data/01 Binded/01 AllOne/AllOneSimulations_HCSF_scaled_FDR_Corr@18_10_28_18_39#576.RData")
bindedResults %>%
mutate(SNR = round((graph.v+graph.u)/graph.v, digits = 2)) %>%
select(-c(SP, algIter, p, penalizeDiagonal, scaled, iterations, graph.g, graph.prob)) %>%
as_tibble() -> bindedResults
bindedResults$SNR <- as.factor(bindedResults$SNR)
bindedResults$SNR
levels(bindedResults$SNR)
labels <- apply(levels(bindedResults$SNR),
1,
function(x) paste0("$SNR=", x,"$"))
labels <- sapply(levels(bindedResults$SNR),
function(x) paste0("$SNR=", x,"$"))
labels
load("./!02 Data/01 Binded/01 AllOne/AllOneSimulations_HCSF_scaled_FDR_Corr@18_10_28_18_39#576.RData")
p    <- unique(bindedResults$p)
prob <- unique(bindedResults$graph.prob)
g    <- unique(bindedResults$graph.g)
gt   <- unique(bindedResults$graphType)[1]
a    <- unique(bindedResults$alpha)[1]
bindedResults %>%
mutate(SNR = round((graph.v+graph.u)/graph.v, digits = 2)) %>%
select(-c(SP, algIter, p, penalizeDiagonal, scaled, iterations, graph.g, graph.prob)) %>%
as_tibble() -> bindedResults
bindedResults$SNR <- as.factor(bindedResults$SNR)
labels1 <- sapply(levels(bindedResults$SNR),
function(x) paste0("$SNR=", x,"$"))
labels1
labels2 <- apply(unique(bindedResults$graph.v),
function(x) paste0("$\\textnormal{Off-diagonal}=", x,"$"))
labels2 <- sapply(unique(bindedResults$graph.v),
function(x) paste0("$\\textnormal{Off-diagonal}=", x,"$"))
labels2
names(labels2) <- unique(bindedResults$graph.v)
names
labels2
bindedResults %>%
filter(graphType == gt & alpha == a) %>%
mutate(procedure = recode_factor(procedure,
`banerjee.gLASSO` = "gLasso (Banerjee)",
`BH.gSLOPE` = "gSLOPE (BH)",
`holm.gSLOPE` = "gSLOPE (Holm)")) -> myResults
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = label2),
scales = "fixed", nrow = 4) +
labs(title = "Power and FDR comparison",
subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\P(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 7) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
theme(aspect.ratio = 8/16,
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,10,0,0))) -> myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 4) +
labs(title = "Power and FDR comparison",
subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\P(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 7) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
theme(aspect.ratio = 8/16,
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,10,0,0))) -> myPlot
myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 4) +
labs(subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\P(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 7) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
theme(aspect.ratio = 8/16,
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,10,0,0))) -> myPlot
myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 4) +
labs(subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\P(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 8) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
theme(aspect.ratio = 8/16,
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,10,0,0))) -> myPlot
myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 2) +
labs(subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\P(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 8) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
theme(aspect.ratio = 8/16,
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,10,0,0))) -> myPlot
myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 2) +
labs(subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\P(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 8) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
# theme(aspect.ratio = 8/16,
#       plot.margin = margin(c(0,0,0,0)),
#       legend.margin = margin(c(0,10,0,0))) -> myPlot
theme(aspect.ratio = 9/16,
legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "vertical",
legend.spacing = unit(0, "cm"),
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,0,0,0))) -> myPlot
myPlot
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphCorrPlotting.R', echo=TRUE)
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 2) +
labs(caption = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\prob(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 7) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
# theme(aspect.ratio = 8/16,
#       plot.margin = margin(c(0,0,0,0)),
#       legend.margin = margin(c(0,10,0,0))) -> myPlot
theme(aspect.ratio = 12/16,
legend.position = "bottom",
legend.direction = "horizontal",
plot.subtitle = ,
legend.box = "vertical",
legend.spacing = unit(0, "cm"),
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,0,0,0))) -> myPlot
myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 2) +
labs(subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\prob(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 7) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
# theme(aspect.ratio = 8/16,
#       plot.margin = margin(c(0,0,0,0)),
#       legend.margin = margin(c(0,10,0,0))) -> myPlot
theme(aspect.ratio = 12/16,
legend.position = "bottom",
legend.direction = "horizontal",
plot.subtitle = ,
legend.box = "vertical",
legend.spacing = unit(0, "cm"),
plot.margin = margin(c(0,0,0,0)),
legend.margin = margin(c(0,0,0,0))) -> myPlot
myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 2) +
labs(subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\prob(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 7) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
# theme(aspect.ratio = 8/16,
#       plot.margin = margin(c(0,0,0,0)),
#       legend.margin = margin(c(0,10,0,0))) -> myPlot
theme(aspect.ratio = 12/16,
legend.position = "bottom",
legend.direction = "horizontal",
plot.subtitle = ,
legend.box = "vertical",
legend.spacing = unit(0, "cm"),
plot.margin = margin(c(1,1,1,1)),
legend.margin = margin(c(0,0,0,0))) -> myPlot
myPlot
gather(myResults, FDR:Power, key = "metric", value = "value") %>%
ggplot(aes(x = factor(n), y = value, color = procedure, shape = metric)) +
geom_jitter(width = 0.2, height = 0, size = 1.5) +
geom_hline(aes(yintercept = a)) +
ylim(c(0,1)) +
# facet_wrap(vars(graph.v), labeller = labeller(graph.v = labels),
#            scales = "fixed", nrow = 4) +
facet_wrap(vars(SNR, graph.v), labeller = labeller(SNR = labels1,
graph.v = labels2),
scales = "fixed", nrow = 2) +
labs(subtitle = paste("Setup: p = $", p,
ifelse(gt != "scale-free",
paste("$, number of components = $", g, "$,"),
"$,"),
"parameter $\\alpha$ = $", a,
"$, graph type =", gt,
ifelse(gt == "cluster",
paste(", $\\prob(x_{ij}\\neq0)=", prob, "$."),
".")),
y = "Value",
x = "Sample size n") +
scale_color_discrete(name = "Procedure:") +
scale_shape_discrete(name = "Measure:") +
# theme_bw() +
theme_bw(base_size = 7) +
guides(color = guide_legend(override.aes = aes(size = 2)),
shape = guide_legend(override.aes = aes(size = 2))) +
# theme(aspect.ratio = 8/16,
#       plot.margin = margin(c(0,0,0,0)),
#       legend.margin = margin(c(0,10,0,0))) -> myPlot
theme(aspect.ratio = 12/16,
legend.position = "bottom",
legend.direction = "horizontal",
plot.subtitle = ,
legend.box = "vertical",
legend.spacing = unit(0, "cm"),
plot.margin = margin(c(5,5,5,5)),
legend.margin = margin(c(0,0,0,0))) -> myPlot
myPlot
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphCorrPlotting.R', echo=TRUE)
tikzTest("Setup: Variables number $p =  100 $, number of components = $ 10 $, parameter $\\alpha$ = $ 0.05 $, graph type = cluster , $\\prob(x_{ij}\\neq0)= 0.5 $.")
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphCorrPlotting.R', echo=TRUE)
gsub(pattern = "SNR", replace = "\\SNR", x = lines)
regexpr(pattern = "SNR", replace = "\\SNR", x = lines)
regexpr(pattern = "SNR", x = lines)
regexpr(pattern = "SNR", text = lines)
gregexpr(pattern = "SNR", text = lines)
max(regexpr(pattern = "SNR", text = lines))
regexpr(pattern = "SNR", text = lines)
which.max(regexpr(pattern = "SNR", text = lines))
lines <-
sub(pattern = "SNR", replace = "\\SNR", x = lines)
which.max(regexpr(pattern = "SNR", text = lines))
sub(pattern = "SNR", replace = "\\SNR", x = lines)
which.max(regexpr(pattern = "SNR", text = lines))
sub(pattern = "SNR", replace = "\\SNR", x = lines)[1962]
sub(pattern = "$SNR", replace = "$\\SNR", x = lines)[1962]
sub(pattern = "{$SNR", replace = "{$\\SNR", x = lines)[1962]
sub(pattern = "SNR", replace = "\\SNR", x = lines, fixed = TRUE)[1962]
gsub(pattern = "SNR", replace = "\\SNR", x = lines, fixed = TRUE)[1962]
gsub(pattern = "SNR", replace = "\\SNR", x = lines)[1962]
ratioMatrix
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphCorrPlotting.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphCorrPlotting.R')
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphCorrPlotting.R', echo=TRUE)
load("./!02 Data/01 Binded/01 AllOne/AllOneSimulations_Cl_scaled_FDR_Prob@18_10_28_00_36#288.RData")
p    <- unique(bindedResults$p)
prob <- unique(bindedResults$graph.prob)
prob <- unique(bindedResults$graph.prob)[1]
g    <- unique(bindedResults$graph.g)
gt   <- unique(bindedResults$graphType)
a    <- unique(bindedResults$alpha)
a    <- unique(bindedResults$alpha)[1]
bindedResults %>%
mutate(SNR = round((graph.v+graph.u)/graph.v, digits = 2)) %>%
select(-c(SP, algIter, p, graphType, penalizeDiagonal, scaled, iterations, graph.g)) %>%
as_tibble() -> bindedResults
bindedResults
bindedResults$SNR <- as.factor(bindedResults$SNR)
rowLabels <- sapply(levels(bindedResults$SNR),
function(x) paste0("$SNR=", x,"$"))
colLabels <- sapply(unique(bindedResults$graph.prob),
function(x) paste0("$prob(x_{ij}\\neq0)=", x, "$"))
names(colLabels) <- unique(bindedResults$graph.prob)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphProbPlotting.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphProbPlotting.R')
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphProbPlotting.R', echo=TRUE)
gsub(pattern = "SNR", replace = "\\SNR", x = lines, fixed = TRUE)
regexpr(pattern = "SNR", x = lines, fixed = TRUE)
regexpr(pattern = "SNR", text = lines, fixed = TRUE)
max(regexpr(pattern = "SNR", text = lines, fixed = TRUE))
which.max(regexpr(pattern = "SNR", text = lines, fixed = TRUE))
gsub(pattern = "SNR", replace = "\\SNR", x = lines, fixed = TRUE)[2970]
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphCorrPlotting.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/clusterGraphProbPlotting.R', echo=TRUE)
huge::huge.generator(n = 100, d = 50, graph = "cluster", v = -1, g = 1, vis = FALSE)
huge::huge.generator(n = 100, d = 50, graph = "cluster", v = -1, g = 1, vis = TRUE)
huge::huge.generator(n = 100, d = 50, graph = "cluster", v = -1, g = 0.5, vis = TRUE)
huge::huge.generator(n = 100, d = 50, graph = "cluster", v = -1, u = 1, vis = TRUE)
huge::huge.generator(n = 100, d = 50, graph = "cluster", v = -1, u = 0.5, vis = TRUE)
huge::huge.generator(n = 100, d = 50, graph = "cluster", v = 0.5, u = 0.5, vis = TRUE)
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 1, vis = TRUE)
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 0.5, vis = TRUE)
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 0.5, vis = TRUE)$sigma
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 1, vis = TRUE)$sigma
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 1, vis = TRUE)$theta
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 1, vis = TRUE)$omega
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 0.5, vis = TRUE)$omegahat
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 0.5, vis = TRUE)$omega
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 0.9, vis = TRUE)$omega
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = 0.5, u = 0.5, vis = TRUE)$omega
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = 0.7, u = 0.3, vis = TRUE)$omega
1/0.7
1.98/1.26
1.68/1.07
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = -1, u = 1, vis = TRUE)$omega
1.11/-0.36
huge::huge.generator(n = 10, d = 5, graph = "cluster", v = .2, u = .8, vis = TRUE)$omega
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = .2, u = .8, vis = TRUE)$omega[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = .2, u = .8, vis = TRUE)$sigma[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = .8, u = .2, vis = TRUE)$sigma[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = .2, u = .8, vis = TRUE)$sigma[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = .2, u = .8, vis = TRUE, prob = 1)$sigma[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = .2, u = .8, vis = TRUE, prob = 1)$omega[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = .5, u = .4, vis = TRUE, prob = 1)$omega[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = -1, u = 1, vis = TRUE, prob = 1)$omega[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = -1, u = 1, vis = TRUE, prob = 1)$sigma[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = -1, u = 1, vis = TRUE, prob = 0.25)$sigma[1:5,1:5]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = -1, u = 1, vis = TRUE, prob = 0.25)$sigma[1:10,1:10]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = -1, u = 1, vis = TRUE, prob = 0.25)$sigma[1:9,1:9]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = -1, u = 1, vis = TRUE, prob = 0.25) -> dup
dup$sigma[1:9,1:9]
dup$theta[1:9,1:9]
dup$sigma[1:9,1:9]
1e-2
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/graphRoc.R', echo=TRUE)
View(results)
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = 0.5, u = 0.4, vis = TRUE, prob = 1)$theta[1:9,1:9]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = 0.5, u = 0.4, vis = TRUE, prob = 1)$omega[1:9,1:9]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = 0.5, u = 0.4, vis = TRUE, prob = 0.5)$omega[1:9,1:9]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = 0.5, u = 0.4, vis = TRUE, prob = 0.5)$omega[1:7,1:7]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = 0.3, u = 0.6, vis = TRUE, prob = 1)$omega[1:7,1:7]
huge::huge.generator(n = 50, d = 100, graph = "cluster", v = 0.7, u = 0.2, vis = TRUE, prob = 1)$omega[1:7,1:7]
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/graphRoc.R', echo=TRUE)
huge.generator(n = 100, d = 100, graph = "cluster", verbose = FALSE,
u = -1, v = 1, prob = 0.5, g = 10)
huge.generator(n = 100, d = 100, graph = "cluster", verbose = FALSE,
u = -1, v = 1, prob = 0.5, g = 10)
huge.generator(n = 100, d = 100, graph = "cluster", verbose = FALSE,
u = -1, v = 0.9, prob = 0.5, g = 10)
huge.generator(n = 100, d = 100, graph = "cluster", verbose = FALSE,
u = 1, v = -1, prob = 0.5, g = 10)
resultsList
1e-3
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!04 ADMMbenchmarking/graphRoc.R', echo=TRUE)
resultsList
