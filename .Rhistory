mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values = c("red", "green", "blue", "yellow")) +
scale_fill_brewer(palette = "Set2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values = c("red", "green", "blue", "yellow")) +
scale_fill_brewer(palette = "Set2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values = c("red", "green", "blue", "yellow")) +
scale_fill_brewer(palette = "Paired") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values = c("red", "green", "blue", "yellow")) +
scale_fill_brewer(palette = "Dark1") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values = c("red", "green", "blue", "yellow")) +
scale_fill_brewer(palette = "Dark2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")) +
# scale_fill_brewer(palette = "Dark2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
# scale_fill_brewer(palette = "Dark2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
scale_fill_hue(l=40) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
# scale_fill_brewer(palette = "Dark2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
scale_fill_hue(l=60) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
# scale_fill_brewer(palette = "Dark2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
scale_fill_hue(l=50) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
# scale_fill_brewer(palette = "Dark2") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
scale_fill_hue(l=50) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
scale_fill_brewer(palette = "Spectral") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
scale_fill_brewer(palette = "Spectral", l=50)) +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
scale_fill_brewer(palette = "Spectral", l=50) +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
scale_fill("brewer", palette = "Spectral", l=50) +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
discrete_scale("brewer", palette = "Spectral", l=50) +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotDiffrence(omegaHat1, adjacent)
plotDiffrence <- function(estimatedMatrix, adjacentMatrix, method = "graph", graphType = NULL, n = NULL, p = NULL, alpha = NULL)
{
properEstimated <- properAdjacent(estimatedMatrix)
properAdjacent <- properAdjacent(adjacentMatrix)
errorMatrix <- 1*(!properAdjacent & properEstimated) + # FP
2*(properAdjacent & properEstimated) +             # TP
3*(properAdjacent & !properEstimated) +            # FN
4*(!properAdjacent & !properEstimated)             # TN
properData <- meltingMatrix(errorMatrix,
# NULL)
"Status")
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("FP", "TP", "FN", "TN")[properData$value]
x <- as.factor(properData$value)
levels(x) <- c("FP", "TP", "FN", "TN")
mainTitle <- paste0("Difference beetwen real & estimated matrix for ", method)
subTitle <- paste0('graphType = ', graphType, ', n = ', n, ', p = ', p, ', alpha = ', alpha)
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
# scale_fill_hue(l=50) +
# scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")[c(2:5)]) +
scale_fill_brewer(palette = "Spectral") +
labs(title =  mainTitle, subtitle = subTitle, fill = "Matrix\nestimator",
x = TeX('$X_1$'), y = TeX('$X_2$')) +
theme_minimal()
return(out)
}
plotMatrix(omegaHat1)
plotMatrix(omegaHat3)
alpha = 0.05
penalizeDiagonal = FALSE
banerjeeLambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "banerjee", verbose = FALSE)
holmlambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "holm", verbose = FALSE)
BHlambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "BH", verbose = FALSE)
generatedData <- huge.generator(n, d = p, graph = graphType, verbose = FALSE)
adjacent <- properAdjacent(generatedData$theta)
omegaHat1 <- glasso(s = generatedData$sigmahat, rho = banerjeeLambda,
penalize.diagonal = penalizeDiagonal)$wi
omegaHat2 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = holmlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
omegaHat3 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = BHlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
plotMatrix(omegaHat3)
plotDiffrence(omegaHat1, adjacent)
library(doSNOW)
library(foreach)
source("12 simulationsFunctions.R")
# iterationsMatrix <- createSimulationMatrix(nVec = 150,
#                                            pVec = 200,
#                                            graphTypeVec = c("hub", "cluster"),
#                                            alphaVec = c(0.1, 0.05, 0.01),
#                                            penalizeDiagonalVec = FALSE,
#                                            partialVec = FALSE,
#                                            iterationsVec = c(10, 20, 41, 83, 166, 312, 625, 1250, 2, 5000))
# iterationTest <- simulations(iterationsMatrix,
#                              saveAll = TRUE)
clusters <- createSimulationMatrix(nVec = c(100, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("cluster"),
alphaVec = c(0.05, 0.05*199/2/200),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 2500)
# clustersTest <- simulations(clusters,
#                             saveAll = TRUE)
methods <- createSimulationMatrix(nVec = 200,
pVec = 200,
graphTypeVec = c("cluster"),
alphaVec = c(0.05),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 2500)
additional <- list(starsMB = list(method = "mb", criterion = "stars"),
ricMB = list(method = "mb"),
starsgLASSO = list(method = "glasso", criterion = "stars"),
ricgLASSO = list(method = "glasso"),
ebicgGLASSO = list(method = "glasso", criterion = "ebic"))
# methodsTest <- simulations(methods,
#                            saveAll = TRUE,
#                            additionalMethods = additional)
hubs <- createSimulationMatrix(nVec = c(50, 100, 150),
pVec = 100,
graphTypeVec = c("hub"),
alphaVec = c(0.05, 0.05*99/2/100),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 2500)
# hubsTest <- simulations(hubs,
#                         saveAll = TRUE)
stopCluster(cl)
cl<-makeCluster(3) #change the 2 to your number of CPU cores
registerDoSNOW(cl)
doparList <-list(list(clusters, NULL), list(methods, additional), list(hubs, NULL))
results <- list()
results <- foreach(i = doparList) %dopar% {
source("12 simulationsFunctions.R")
simulations(i[[1]],
saveAll = TRUE,
additionalMethods = i[[2]])
}
stopCluster(cl)
methods
results
load("C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/!02 Data/01 Binded/Simulation_1_18_07_31_11_10.RData")
results
length(results)
doparList
doparList[[1]][[2]]
for(r in 1:length(results))
{
filenameAll <- paste0("Simulation_", nrow(results[[r]]), "_",
format(Sys.time(), '%y_%m_%d_%H_%M'))
output <- results[[r]]
additionalMethods <- doparList[[r]][[2]]
save(output, additionalMethods,
file = paste0("./!02 Data/01 Binded/", filenameAll, ".RData"))
}
