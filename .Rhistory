guides(fill = guide_colorbar(order = 1, barwidth = 1, barheight = 10),
colour = guide_legend(order = 2, keywidth = 1, keyheight = 1, title.position = "bottom")) +
theme_minimal() +
theme(legend.spacing.y = unit(-0.3, "cm"))
out
out <- ggplot(properData, aes(x=X1, y=X2))
out <- out + geom_tile(aes(fill = value))
out <- out + labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
# scale_fill_gradient(name="Matrix\nentry\nvalue",
#                     limits = c(.Machine$double.eps, NA)) +
# scale_colour_discrete(name=NULL) +
# guides(fill = guide_colorbar(order = 1, barwidth = 1, barheight = 10),
#        colour = guide_legend(order = 2, keywidth = 1, keyheight = 1, title.position = "bottom")) +
theme_minimal() +
theme(legend.spacing.y = unit(-0.3, "cm"))
out
out <- ggplot(properData, aes(x=X1, y=X2))
out <- out + geom_tile(aes(fill = value))
out <- out + labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("white", "black"))
theme_minimal() +
theme(legend.spacing.y = unit(-0.3, "cm"))
out <- ggplot(properData, aes(x=X1, y=X2))
# out <- out + geom_tile(data = subset(properData, !is.zero(value)), aes(fill = value)) +
#     geom_tile(data = subset(properData,  is.zero(value)), aes(colour = "0"), linetype = 0, fill = "grey50", alpha = .5)
out <- out + geom_tile(aes(fill = value))
out <- out + labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("white", "black")) +
theme_minimal() +
theme(legend.spacing.y = unit(-0.3, "cm"))
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("blue", "red")) +
theme_minimal() +
theme(legend.spacing.y = unit(-0.3, "cm"))
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("red", "blue")) +
theme_minimal() +
theme(legend.spacing.y = unit(-0.3, "cm"))
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("lightblue", "red")) +
theme_minimal() +
theme(legend.spacing.y = unit(-0.3, "cm"))
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("lightblue", "red")) +
theme_minimal()
out
properData <- apply(properData, 2, as.integer)
properData <- rbind(meltingMatrix((benchResult[[1]]$matrix > 0), benchResult[[1]]$name),
meltingMatrix((benchResult[[2]]$matrix > 0), benchResult[[2]]$name),
meltingMatrix((benchResult[[3]]$matrix > 0), benchResult[[3]]$name),
meltingMatrix((benchResult[[4]]$matrix > 0), benchResult[[4]]$name))
properData <- apply(properData, 1, as.integer)
benchResult <- X
properData <- rbind(meltingMatrix((benchResult[[1]]$matrix > 0), benchResult[[1]]$name),
meltingMatrix((benchResult[[2]]$matrix > 0), benchResult[[2]]$name),
meltingMatrix((benchResult[[3]]$matrix > 0), benchResult[[3]]$name),
meltingMatrix((benchResult[[4]]$matrix > 0), benchResult[[4]]$name))
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData
properData$value <- as.integer(properData$value)
mainTitle <- paste0("Comparision of different precision matrix estimation methods")
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("lightblue", "red")) +
theme_minimal()
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_discrete(values = c("lightblue", "red")) +
theme_minimal()
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
# scale_fill_discrete(values = c("lightblue", "red")) +
theme_minimal()
out
benchResult <- X
properData <- rbind(meltingMatrix((benchResult[[1]]$matrix > 0), benchResult[[1]]$name),
meltingMatrix((benchResult[[2]]$matrix > 0), benchResult[[2]]$name),
meltingMatrix((benchResult[[3]]$matrix > 0), benchResult[[3]]$name),
meltingMatrix((benchResult[[4]]$matrix > 0), benchResult[[4]]$name))
colnames(properData) <- c("X1", "X2", colnames(properData)[3:4])
properData$value <- c("0", "1")[1+properData$value]
mainTitle <- paste0("Comparision of different precision matrix estimation methods")
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
# scale_fill_discrete(values = c("lightblue", "red")) +
theme_minimal()
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_discrete(values = c("lightblue", "darkblue")) +
theme_minimal()
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_discrete(values = c("lightblue", "red")) +
theme_minimal()
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_discrete(values = c("lightblue")) +
theme_minimal()
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = value)) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_discrete() +
theme_minimal()
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_discrete() +
theme_minimal()
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_discrete(values = c("lightblue", "red")) +
theme_minimal()
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("lightblue", "red")) +
theme_minimal()
out
out <- ggplot(properData, aes(x=X1, y=X2)) +
geom_tile(aes(fill = factor(value))) +
labs(title =  mainTitle, x = TeX('$X_1$'), y = TeX('$X_2$')) +
facet_wrap(~index) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
theme_minimal()
out
plotFour(X)
meltingMatrix <- function(matrix,
index = NULL)
{
colnames(matrix) <- 1:ncol(matrix)
rownames(matrix) <- 1:ncol(matrix)
matrix <- reshape2::melt(matrix)
if(!is.null(index))
matrix <- cbind(matrix, index)
return(matrix)
}
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/01 auxilaryFunctions.R')
plotFour(X)
n = 300
p = 200
graphType = "cluster"
alpha = 0.05
penalizeDiagonal = FALSE
banerjeeLambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "banerjee", verbose = FALSE)
holmlambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "holm", verbose = FALSE)
BHlambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "BH", verbose = FALSE)
generatedData <- huge.generator(n, d = p, graph = graphType, verbose = FALSE)
adjacent <- properAdjacent(generatedData$theta)
omegaHat1 <- glasso(s = generatedData$sigmahat, rho = banerjeeLambda,
penalize.diagonal = penalizeDiagonal)$wi
omegaHat2 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = holmlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
omegaHat3 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = BHlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
X <- list(list(matrix = omegaHat1, name = "gLASSO"),
list(matrix = omegaHat2, name = "Holm"),
list(matrix = omegaHat3, name = "BH"),
list(matrix = adjacent, name = "Original"))
plotFour(X)
gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = BHlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)
BHlambda
gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = holmlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)
banerjeeLambda
penalizeDiagonal = TRUE
banerjeeLambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "banerjee", verbose = FALSE)
holmlambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "holm", verbose = FALSE)
BHlambda <- lambdaSelector(input = p, n = n, alpha = alpha, method = "BH", verbose = FALSE)
generatedData <- huge.generator(n, d = p, graph = graphType, verbose = FALSE)
adjacent <- properAdjacent(generatedData$theta)
omegaHat1 <- glasso(s = generatedData$sigmahat, rho = banerjeeLambda,
penalize.diagonal = penalizeDiagonal)$wi
omegaHat2 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = holmlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
omegaHat3 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = BHlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
X <- list(list(matrix = omegaHat1, name = "gLASSO"),
list(matrix = omegaHat2, name = "Holm"),
list(matrix = omegaHat3, name = "BH"),
list(matrix = adjacent, name = "Original"))
plotFour(X)
omegaHat2 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = holmlambda,
penalizeDiagonal = penalizeDiagonal, epsilon = 10e-6,
truncate = TRUE)$precisionMatrix
omegaHat2 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = holmlambda,
penalizeDiagonal = penalizeDiagonal, absoluteEpsilon = 10e-6,
truncate = TRUE)$precisionMatrix
X <- list(list(matrix = omegaHat1, name = "gLASSO"),
list(matrix = omegaHat2, name = "Holm"),
list(matrix = omegaHat3, name = "BH"),
list(matrix = adjacent, name = "Original"))
plotFour(X)
a <- list(dupa = "ddd")
a
c(a, DDD)
c(a, "ads")
c(a, du = "ads")
warnings()
lambdaSelector(10,10)
lambdaSelector(10,10, method = "BH")
lambdaSelector(10,10, method = "BH")[1]
lambdaSelector(10,10)
lambdaSelector(10,10, method = "BH")[1]*9/10*4
lambdaSelector(10,10, alpha = 0.05*9/10*4, method = "BH")[1]*9/10*4
lambdaSelector(10,10, alpha = 0.05*9/10*4, method = "BH")[1]
lambdaSelector(10,10)
lambdaSelector(10,10, alpha = 0.05*9/10/4, method = "BH")[1]
lambdaSelector(10,10, alpha = 0.05)
lambdaSelector <- function(input, n, alpha = 0.05, method = "banerjee", verbose = TRUE)
{
p <- ncol(input)
if(!is.matrix(input))
{
if(verbose) cat("The input is identified as a dimension.\n")
p <- input[1]
twoLargestProd <- 1
} else if(!isSymmetric(input))
{
if(verbose) cat("The input is identified as the data matrix.\n")
n <- nrow(input)
input <- cov(scale(input))
twoLargestProd <- 1
} else
{
if(verbose) cat("The input is identified as the covariance matrix.\n")
twoLargestProd <- prod(-sort(-diag(input), partial = 2)[1:2]) # In case data wasn't scaled
}
out = switch(method,
banerjee = lambdaBanerjee(p, n, alpha, twoLargestProd),
BH = lambdaBH(p, n, alpha, twoLargestProd),
holm = lambdaHolm(p, n, alpha, twoLargestProd))
return(out)
}
lambdaSelector(10,10, alpha = 0.05)
lambdaSelector(10,10, alpha = 0.05*9/10/4, method = "BH")[1]
8/2/2
lambdaSelector(10,10, alpha = 0.05)
lambdaSelector(10,10, alpha = 0.05*9/10/2, method = "BH")[1]
BHlambda <- lambdaSelector(input = p, n = n, alpha = alpha*(p-1)/2/p, method = "BH", verbose = FALSE)
generatedData <- huge.generator(n, d = p, graph = graphType, verbose = FALSE)
adjacent <- properAdjacent(generatedData$theta)
omegaHat1 <- glasso(s = generatedData$sigmahat, rho = banerjeeLambda,
penalize.diagonal = penalizeDiagonal)$wi
omegaHat2 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = holmlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
omegaHat3 <- gslopeADMM(sampleCovariance = generatedData$sigmahat, lambda = BHlambda,
penalizeDiagonal = penalizeDiagonal,
truncate = TRUE)$precisionMatrix
X <- list(list(matrix = omegaHat1, name = "gLASSO"),
list(matrix = omegaHat2, name = "Holm"),
list(matrix = omegaHat3, name = "BH"),
list(matrix = adjacent, name = "Original"))
plotFour(X)
firstTestMatrix <- createSimulationMatrix(nVec = c(100, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("hub", "cluster"),
alphaVec = c(0.1, 0.05, 0.01),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 250)
firstTestMatrix
0.05*199/2/200
lambdaSelector(10,10, alpha = 0.05*199/200/2, method = "BH")[1]
lambdaSelector(10,10)[1]
lambdaSelector(10,200, alpha = 0.05*199/200/2, method = "BH")[1]
lambdaSelector(10,200)[1]
lambdaSelector(200,10)[1]
lambdaSelector(200,10, alpha = 0.05*199/200/2, method = "BH")[1]
sanityCheckMatrix <- createSimulationMatrix(nVec = c(100, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("cluster"),
alphaVec = c(0.05, 0.05*199/2/200),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 250)
sanityCheckMatrix
firstTestMatrix <- createSimulationMatrix(nVec = c(100, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("hub", "cluster"),
alphaVec = c(0.1, 0.05, 0.01),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 2)
firstTest <- simulations(firstTestMatrix,
saveAll = TRUE)
firstTestMatrix <- createSimulationMatrix(nVec = c(100),#, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("hub", "cluster"),
alphaVec = c(0.1, 0.05, 0.01),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 2)
firstTest <- simulations(firstTestMatrix,
saveAll = TRUE)
source("12 simulationsFunctions.R")
firstTestMatrix <- createSimulationMatrix(nVec = c(100),#, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("hub", "cluster"),
alphaVec = c(0.1, 0.05, 0.01),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 2)
firstTest <- simulations(firstTestMatrix,
saveAll = TRUE)
source("12 simulationsFunctions.R")
firstTest <- simulations(firstTestMatrix,
saveAll = TRUE)
source("12 simulationsFunctions.R")
firstTestMatrix <- createSimulationMatrix(nVec = c(100),#, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("hub", "cluster"),
alphaVec = c(0.1), #, 0.05, 0.01),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 2)
firstTest <- simulations(firstTestMatrix,
saveAll = TRUE)
firstTestMatrix
simulationMatrix <- firstTestMatrix
additionalMethods = NULL
verbose = TRUE
saveEach = FALSE
saveAll = FALSE
simulations <- function(simulationMatrix,
additionalMethods = NULL,
verbose = TRUE,
saveEach = FALSE,
saveAll = FALSE)
{
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, verbose = FALSE, args = x)
if(verbose)
{
cat("Starting simulations\nnumber of setups = ", nrow(simulationMatrix),
"\nnumber of simulationS = ", sum(simulationMatrix$iterations))
progressBar <- txtProgressBar(min = 0, max = sum(simulationMatrix$iterations), style = 3)
setTxtProgressBar(progressBar, 0)
}
if(saveAll)
{
filenameAll <- paste0("Simulation_", nrow(simulationMatrix), "_",
format(Sys.time(), '%y_%m_%d_%H_%M'))
}
output <- list()
for(r in seq_len(nrow(simulationMatrix)))
{
simResults <- specificDoCall(simulationMatrix[r,])
output[[r]] <- cbind(simResults, simulationMatrix[r,], make.row.names = FALSE)
if(saveEach)
{
filename <- paste0("Simulation_",
# format(Sys.time(), '%y_%m_%d_%H_%M'),
paste(simulationMatrix[r,], collapse = '_'))
setup <- simulationMatrix[r,]
save(simResults, setup, additionalMethods, file = paste0("./!02 Data/", filename, ".RData"))
}
if(saveAll)
{
tempOutput <- do.call("rbind", output)
save(tempOutput, additionalMethods,
file = paste0("./!02 Data/01 Binded/", filenameAll, ".RData"))
}
if(verbose)
setTxtProgressBar(progressBar, sum(simulationMatrix$iterations[1:r]))
}
if(verbose)
close(progressBar)
output <- do.call("rbind", output)
if(saveAll)
{
save(output, additionalMethods,
file = paste0("./!02 Data/01 Binded/", filenameAll, ".RData"))
}
return(output)
}
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, verbose = FALSE, args = x)
if(verbose)
{
cat("Starting simulations\nnumber of setups = ", nrow(simulationMatrix),
"\nnumber of simulationS = ", sum(simulationMatrix$iterations))
progressBar <- txtProgressBar(min = 0, max = sum(simulationMatrix$iterations), style = 3)
setTxtProgressBar(progressBar, 0)
}
if(saveAll)
{
filenameAll <- paste0("Simulation_", nrow(simulationMatrix), "_",
format(Sys.time(), '%y_%m_%d_%H_%M'))
}
output <- list()
r<-r
r<-r1
r<-1
simResults <- specificDoCall(simulationMatrix[r,])
output[[r]] <- cbind(simResults, simulationMatrix[r,], make.row.names = FALSE)
if(saveEach)
{
filename <- paste0("Simulation_",
# format(Sys.time(), '%y_%m_%d_%H_%M'),
paste(simulationMatrix[r,], collapse = '_'))
setup <- simulationMatrix[r,]
save(simResults, setup, additionalMethods, file = paste0("./!02 Data/", filename, ".RData"))
}
if(TRUE)
{
tempOutput <- do.call("rbind", output)
save(tempOutput, additionalMethods,
file = paste0("./!02 Data/01 Binded/", filenameAll, ".RData"))
}
if(TRUE)
{
filenameAll <- paste0("Simulation_", nrow(simulationMatrix), "_",
format(Sys.time(), '%y_%m_%d_%H_%M'))
}
if(TRUE)
{
tempOutput <- do.call("rbind", output)
save(tempOutput, additionalMethods,
file = paste0("./!02 Data/01 Binded/", filenameAll, ".RData"))
}
if(verbose)
setTxtProgressBar(progressBar, sum(simulationMatrix$iterations[1:r]))
r = 2
simResults <- specificDoCall(simulationMatrix[r,])
output[[r]] <- cbind(simResults, simulationMatrix[r,], make.row.names = FALSE)
if(saveEach)
{
filename <- paste0("Simulation_",
# format(Sys.time(), '%y_%m_%d_%H_%M'),
paste(simulationMatrix[r,], collapse = '_'))
setup <- simulationMatrix[r,]
save(simResults, setup, additionalMethods, file = paste0("./!02 Data/", filename, ".RData"))
}
if(saveAll)
{
tempOutput <- do.call("rbind", output)
save(tempOutput, additionalMethods,
file = paste0("./!02 Data/01 Binded/", filenameAll, ".RData"))
}
if(verbose)
setTxtProgressBar(progressBar, sum(simulationMatrix$iterations[1:r]))
output[[r]] <- cbind(simResults, simulationMatrix[r,], row.names = NULL)
.Primitive("list")
output <- list()
r = 1
simResults <- specificDoCall(simulationMatrix[r,])
output[[r]] <- cbind(simResults, simulationMatrix[r,], row.names = NULL)
r = 2
simResults <- specificDoCall(simulationMatrix[r,])
output[[r]] <- cbind(simResults, simulationMatrix[r,], row.names = NULL)
output
output <- do.call("rbind", output)
output
seq_len(iterations)
iterations = 250
seq_len(iterations)
sanityCheckMatrix <- createSimulationMatrix(nVec = c(100, 150, 200, 250, 300),
pVec = 200,
graphTypeVec = c("cluster"),
alphaVec = c(0.05, 0.05*199/2/200),
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 250)
