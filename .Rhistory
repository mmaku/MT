require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/04 admmGLASSO.R', echo=TRUE)
cov(data)
solve(cov(data))
try(solve(cov(data)))
try(solve(cov(data)), silent = T)
try(X = solve(cov(data)), silent = T)
try(X <- solve(cov(data)), silent = T)
X
X <- matrix(0, nrow= 10, ncol = 10)
try(X <- solve(cov(data)), silent = T)
X
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
ggsave("firstBench_0.1_F_T.png", plotBenchOne(firstBench_0.1_F_T), device = "png", path = "./00 Plots/01 first/", dpi = 200)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
ggsave("firstBench_0.1_F_T.png", plotBenchOne(firstBench_0.1_F_T), device = "png", path = "./00 Plots/01 first/", dpi = 200)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
require(MASS)
require(glasso)
require(huge)
require(tictoc)
for(mu in seq(from = 0.5, to = 10))
{
tic(mu)
toc(mu)
}
for(mu in seq(from = 0.5, to = 19))
{
tic(mu)
toc(mu)
}
require(MASS)
require(glasso)
require(huge)
require(tictoc)
source("04 admmGLASSO.R")
source("01 auxilaryFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
tic("total")
for(mu in seq(from = 1, to = 20))
{
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
tic("total")
for(mu in seq(from = ,1, to = 2, length.out = 25))
{
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
toc("total")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
toc("total")
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = .034, truncate = F)
toc(mu)
}
tic("total")
for(mu in seq(from = .1, to = 1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, truncate = F)
toc(mu)
}
toc("total")
absoluteEpsilon = 1e-4
(1/absoluteEpsilon)%/%10
(1/absoluteEpsilon)%%10
(1/absoluteEpsilon)
log10( (1/absoluteEpsilon))
round(log10( (1/absoluteEpsilon)))
source("04 admmGLASSO.R")
source("01 auxilaryFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
tic("total")
for(mu in seq(from = .5, to = .9, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
banerjeeLassoLambda <- round(banerjeeLassoLambda, digits = 5)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, truncate = F)
toc()
}
toc()
tic("total")
for(mu in seq(from = .5, to = .9, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
toc()
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/04 admmGLASSO.R', echo=TRUE)
sampleCovariance <- matrix(0, 5, 5)
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
penalizeDiagonal = TRUE
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
entriesNumber
penalizeDiagonal = F
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
entriesNumber
entries <- sampleCovariance[lower.tri(sampleCovariance, penalizeDiagonal)]
length(entries)
penalizeDiagonal = T
length(entries)
entries <- sampleCovariance[lower.tri(sampleCovariance, penalizeDiagonal)]
entriesNumber <- sum(1:(ncol(sampleCovariance)-!penalizeDiagonal))
length(entries)
entriesNumber
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/06 OWL1prox.R', echo=TRUE)
require(MASS)
require(glasso)
require(huge)
source("01 auxilaryFunctions.R")
source("04 admmGLASSO.R")
source("07 admmGSLOPE.R")
source("09 benchmarkingFunctions.R")
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
data = scale(huge.generator(n=400, d=100, graph="hub")$data) # Generate data with hub structures
tic("total")
for(mu in seq(from = .5, to = .9, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
toc()
tic("total")
for(mu in seq(from = 1, to = 2, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
tic("total")
for(mu in seq(from = 1, to = 2.1, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
data = scale(huge.generator(n=200, d=200, graph="cluster")$data) # Generate data with hub structures
tic("total")
for(mu in seq(from = .4, to = 1.5, length.out = 25))
{
n     <- nrow(data)
p     <- ncol(data)
m     <- p*(p-1)/2
alpha <- 0.05
mBanerjee <- p^2
banerjeeLassoLambda <- qt(1-alpha/2/mBanerjee, df = n-2)/sqrt(n-2+qt(1-alpha/2/mBanerjee, df = n-2)^2)
tic(mu)
X <- glassoADMM(cov(data), mu = mu, lambda = banerjeeLassoLambda, penalizeDiagonal =  T)
toc()
}
toc()
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/09 benchmarkingFunctions.R', echo=TRUE)
thirdClusterBench__0.05_F_T <- benchOne(data)
thirdClusterBench__0.05_F_T_ric <- benchOne(data, selectCriterion = "ric")
thirdClusterBench__0.05_F_T_ebic <- benchOne(data, selectCriterion = "ebic")
plotBenchOne(thirdClusterBench__0.1_F_T)
set.seed(100)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
firstBench_0.1_F_T <- benchOne(data, alpha = .1)
firstBench_0.05_F_T <- benchOne(data)
firstBench_0.05_F_T_ric <- benchOne(data, selectCriterion = "ric")
firstBench_0.05_F_T_ebic <- benchOne(data, selectCriterion = "ebic")
ggsave("firstBench_0.05_F_T.png", plotBenchOne(firstBench_0.05_F_T), device = "png", path = "./00 Plots/01 first/01 criterion/", dpi = 200)
ggsave("firstBench_0.05_F_T_ric.png", plotBenchOne(firstBench_0.05_F_T_ric), device = "png", path = "./00 Plots/01 first/01 criterion/", dpi = 200)
ggsave("firstBench_0.05_F_T_ebic.png", plotBenchOne(firstBench_0.05_F_T_ebic), device = "png", path = "./00 Plots/01 first/01 criterion/", dpi = 200)
data  <- scale(dataSimulator(n = 100, SNR = 1, K = 5, numb.vars = 30, max.dim = 3)$X)
data
str(data)
data = scale(huge.generator(n=400, d=100, graph="hub")$data) # Generate data with hub structures
data
str(data)
data = scale(huge.generator(n=100, d=400, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1, selectCriterion = "ebic")
plotBenchOne(secondHubBench_0.1_F_T)
data = scale(huge.generator(n=75, d=150, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1, selectCriterion = "ebic")
plotBenchOne(secondHubBench_0.1_F_T)
data = scale(huge.generator(n=75, d=100, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1, selectCriterion = "ebic")
plotBenchOne(secondHubBench_0.1_F_T)
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1)
plotBenchOne(secondHubBench_0.1_F_T)
data = scale(huge.generator(n=75, d=100, graph="hub")$data) # Generate data with hub structures
secondHubBench_0.1_F_T <- benchOne(data, alpha = .1)
secondHubBench_0.1_F_F <- benchOne(data, alpha = .1, truncate = F)
secondHubBench_0.1_T_T <- benchOne(data, alpha = .1, penalizeDiagonal = T)
secondHubBench_0.1_T_F <- benchOne(data, alpha = .1, truncate = F, penalizeDiagonal = T)
secondHubBench_0.05_F_T <- benchOne(data)
secondHubBench_0.05_F_F <- benchOne(data, truncate = F)
secondHubBench_0.05_T_T <- benchOne(data, penalizeDiagonal = T)
secondHubBench_0.05_T_F <- benchOne(data, truncate = F, penalizeDiagonal = T)
secondHubBench_0.01_F_T <- benchOne(data, alpha = .01)
secondHubBench_0.01_F_F <- benchOne(data, alpha = .01, truncate = F)
secondHubBench_0.01_T_T <- benchOne(data, alpha = .01, penalizeDiagonal = T)
secondHubBench_0.01_T_F <- benchOne(data, alpha = .01, truncate = F, penalizeDiagonal = T)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_F.png", plotBenchOne(secondHubBench_0.1_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_F.png", plotBenchOne(secondHubBench_0.1_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_T.png", plotBenchOne(secondHubBench_0.1_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_T.png", plotBenchOne(secondHubBench_0.05_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_F.png", plotBenchOne(secondHubBench_0.05_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_F.png", plotBenchOne(secondHubBench_0.05_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_T.png", plotBenchOne(secondHubBench_0.05_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_T.png", plotBenchOne(secondHubBench_0.01_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_F.png", plotBenchOne(secondHubBench_0.01_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_F.png", plotBenchOne(secondHubBench_0.01_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_T.png", plotBenchOne(secondHubBench_0.01_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
plotBenchOne(secondHubBench_0.1_F_T)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "jpg", path = "./00 Plots/02 second/", dpi = 200)
plotBenchOne(secondHubBench_0.1_F_T)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_T.png", plotBenchOne(secondHubBench_0.05_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_T.png", plotBenchOne(secondHubBench_0.01_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_T.png", plotBenchOne(secondHubBench_0.1_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_T.png", plotBenchOne(secondHubBench_0.05_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_T.png", plotBenchOne(secondHubBench_0.01_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/08 admmGSLOPEbenchmarking.R', echo=TRUE)
ggsave("secondHubBench_0.1_F_T.png", plotBenchOne(secondHubBench_0.1_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_F.png", plotBenchOne(secondHubBench_0.1_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_F_F.png", plotBenchOne(secondHubBench_0.1_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.1_T_T.png", plotBenchOne(secondHubBench_0.1_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_T.png", plotBenchOne(secondHubBench_0.05_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_F.png", plotBenchOne(secondHubBench_0.05_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_F_F.png", plotBenchOne(secondHubBench_0.05_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.05_T_T.png", plotBenchOne(secondHubBench_0.05_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_T.png", plotBenchOne(secondHubBench_0.01_F_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_F.png", plotBenchOne(secondHubBench_0.01_T_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_F_F.png", plotBenchOne(secondHubBench_0.01_F_F), device = "png", path = "./00 Plots/02 second/", dpi = 200)
ggsave("secondHubBench_0.01_T_T.png", plotBenchOne(secondHubBench_0.01_T_T), device = "png", path = "./00 Plots/02 second/", dpi = 200)
require(MASS)
require(glasso)
install.packages("glasso")
install.packages("SLOPE")
c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)
count(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)    )
len(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)    )
length(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5)    )
x <- matrix(c(1,2,3,0,0,1,2,3,4,5,6,4,2,2,4,5), nrow = 4, ncol = 4)
x
T(x)
t(x)
t(x)[x == 0]
x <- matrix(c(1,2,3,0,0,1,2,3,4,0,0,4,2,2,4,5), nrow = 4, ncol = 4)
t(x)[x == 0]
t(x)[x == 0] == 0
sum(t(x)[x == 0] == 0)
sum(t(x)[x == 0] != 0)
3/2
3/2 == 1.5
6/4 == 1.5
60/04 == 1.5
60/40 == 1.5
60/4/10 == 1.5
60/4/*,10 == 1.5
60/4/*.10 == 1.5
60/4*.10 == 1.5
T = 1
T = 23
T = 0
max(c(1,2,NA),na.rm = T)
max(c(1,2,NA),na.rm = F)
max(c(1,2,NA),na.rm = TRUE)
qr.Q(qr(replicate(dims[j], rnorm(n, 0, 1))))
rnorm(10, 0, 1)
replicate(dims[1], rnorm(n, 0, 1))
replicate(3, rnorm(n, 0, 1))
replicate(3, rnorm(3, 0, 1))
replicate(10, rnorm(3, 0, 1))
replicate(2, rnorm(100, 0, 1))
qr(replicate(2, rnorm(100, 0, 1)))
qr.Q(qr(replicate(2, rnorm(100, 0, 1))))
qr.Q(qr(replicate(2, rnorm(100, 0, 1)))) == qr(replicate(2, rnorm(100, 0, 1)))$qr
qr.Q(qr(replicate(2, rnorm(100, 0, 1)))) == qr(replicate(2, rnorm(100, 0, 1)))$qr[lower.tri(qr(replicate(2, rnorm(100, 0, 1)))$qr)]
qr.Q(qr(replicate(2, rnorm(100, 0, 1)))) == qr(replicate(2, rnorm(100, 0, 1)))$qr
qr(replicate(2, rnorm(100, 0, 1)))$qr*t(qr(replicate(2, rnorm(100, 0, 1)))$qr)
qr(replicate(2, rnorm(100, 0, 1)))$qr%*%t(qr(replicate(2, rnorm(100, 0, 1)))$qr)
qr(replicate(2, rnorm(100, 0, 1)))$qr*t(qr(replicate(2, rnorm(100, 0, 1)))$qr)
replicate(2, rnorm(100, 0, 1))
wq <- qr.Q(qr(replicate(2, rnorm(100, 0, 1))))
wg*t(wq)
wq*t(wq)
wq%*%t(wq)
wq
wq <- qr.Q(qr(replicate(2, rnorm(100, 0, 1))))
wq
t(wq)
t(wq)*wq
t(wq)$*$wq
t(wq)%*%wq
wq%*%t(wq)
t(wq)%*%wq
matrix(runif(2 * 30, 0.1, 1) *
sign(runif(2 * 30, -1, 1)), nrow = 2)
coef <- matrix(runif(2 * 30, 0.1, 1) *
sign(runif(2 * 30, -1, 1)), nrow = 2)
wq %*% coef
wq * coef
dim(wq)
dim(coef)
scale(matrix(1:25, 5, 5))
mean(scale(matrix(1:25, 5, 5)))
var(scale(matrix(1:25, 5, 5)))
covv(scale(matrix(1:25, 5, 5)))
cov(scale(matrix(1:25, 5, 5)))
norm(scale(matrix(1:25, 5, 5)))
scale(matrix(1:25, 5, 5))
wq * coef
scale(wq %*% coef)
FDPseries <- c()
FDPseries <- NULL
require(glasso)
require(huge)
install.packages("huge")
require(tictoc)
install.packages("tictoc")
require(tictoc)
source('~/.active-rstudio-document', echo=TRUE)
toc()
source('~/.active-rstudio-document', echo=TRUE)
require(glasso)
require(huge)
graphHUGE <- huge.generator(10, 10, "cluster")
graphHUGE$data
graphHUGE$graph.type
graphHUGE
graphHUGE$sigma
graphHUGE$sigmahat
graphHUGE$omega
graphHUGE$theta
require(glasso)
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=TRUE)
results <- FDR()
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=TRUE)
results <- FDR()
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=TRUE)
results <- FDR()
results
testit <- function(x = sort(runif(20)), ...)
{
pb <- txtProgressBar(...)
for(i in c(0, x, 1)) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(1)
close(pb)
}
testit()
testit(style = 3)
testit <- function(x = 1:20, ...)
{
pb <- txtProgressBar(...)
for(i in c(0, x, 1)) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(1)
close(pb)
}
testit <- function(x = 1:20, ...)
{
pb <- txtProgressBar(...)
for(i in c(0, x, 1)) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(.1)
close(pb)
}
testit <- function(x = seq(0, 1, 20), ...)
{
pb <- txtProgressBar(...)
for(i in x) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(.1)
close(pb)
}
testit()
testit(runif(10))
seq(0, 1, 20)
seq(from = 0, to = 1, len = 20)
testit <- function(x = seq(from = 0, to = 1, len = 20), ...)
{
pb <- txtProgressBar(...)
for(i in x) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(.1)
close(pb)
}
testit()
testit(runif(10))
testit(style = 3)
testit(title = "Progress", style = 3)
FDR(simulationsNumber = 20)
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=TRUE)
FDR(simulationsNumber = 20)
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=TRUE)
FDR(simulationsNumber = 10)
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=TRUE)
FDR(simulationsNumber = 10)
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=TRUE)
FDR(simulationsNumber = 10)
results <- FDR(simulationsNumber = 10)
results
results$FDRgLASSO
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=FALSE)
results <- FDR(simulationsNumber = 10)
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=FALSE)
results <- FDR(simulationsNumber = 10)
results
set.seed(10)
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=FALSE)
set.seed(10)
results <- FDR(simulationsNumber = 10)
results
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=FALSE)
set.seed(10)
results <- FDR(simulationsNumber = 10)
results
source('~/01 Projekty/02 Magisterka/gSLOPE/11 FDR.R', echo=FALSE)
results <- FDR(simulationsNumber = 10)
results
pts <- list(x = cars[,1], y = cars[,2])
pts
