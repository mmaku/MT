str(createSimulationMatrix())
createSimulationMatrix(nVec = c(100, 200))
foo ,- createSimulationMatrix(nVec = c(100, 200))
foo <- createSimulationMatrix(nVec = c(100, 200))
str(foo)
additionalMethods = NULL
simulations <- function(simulationMatrix, additionalMethods = NULL)
{
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
output <- data.frame(FDR = numeric(), SN = numeric(), SP = numeric(),
n = integer(), p = integer(), graphType = character(),
alpha = numeric(), penalizeDiagonal = logical(), partial = logical(),
iterations = integer(), stringsAsFactors = FALSE)
for(r in 1:nrow(simulationMatrix))
{
simResults <-
}
simulations <- function(simulationMatrix, additionalMethods = NULL)
{
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
output <- data.frame(FDR = numeric(), SN = numeric(), SP = numeric(),
n = integer(), p = integer(), graphType = character(),
alpha = numeric(), penalizeDiagonal = logical(), partial = logical(),
iterations = integer(), stringsAsFactors = FALSE)
for(r in 1:nrow(simulationMatrix))
{
simResults <-
}
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
specificDoCall
createSimulationMatrix
apply(foo, mean)
lapply(foo, mean)
foo <- createSimulationMatrix(nVec = c(100, 200), iterationsVec = 2)
lapply(foo, specificDoCall)
foo
foo[1]
foo[[1]]
foo[1,]
doCall("measures", additionalMethods = additionalMethods, args = foo[1,])
str(foo)
dim(foo)
length(foo)
apply(foo, 2, specificDoCall)
apply(foo, 1, specificDoCall)
foo
str(foo)
str(foo[1,])
doCall("measures", additionalMethods = additionalMethods, args = foo[1,])
apply(foo, 1, specificDoCall, additionalMethods = additionalMethods)
apply(foo, 1, specificDoCall, additionalMethods = NULL)
apply(foo, 1, measures, additionalMethods = NULL)
simulations <- function(simulationMatrix, additionalMethods = NULL)
{
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
output <- data.frame(FDR = numeric(), SN = numeric(), SP = numeric(),
n = integer(), p = integer(), graphType = character(),
alpha = numeric(), penalizeDiagonal = logical(), partial = logical(),
iterations = integer(), stringsAsFactors = FALSE)
for(r in 1:nrow(simulationMatrix))
{
simResults <-
}
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
apply(foo, 1, specificDoCall, additionalMethods = NULL)
apply(foo, 1, specificDoCall)
typeof(simulationMatrix)
typeof(simulationMatrix[1,1])
simulationMatrix[1,1]
simulationMatrix
str(simulationMatrix)
str(foo)
typeof(foo[1,1])
apply(foo, 1, specificDoCall)
as.integer("2")
typeof(as.integer("2"))
typeof(as.numeric("2"))
additionalMethods = list(a = "sad", b = 2)
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
apply(foo, 1, specificDoCall)
simulations <- function(simulationMatrix, additionalMethods = NULL)
{
specificDoCall <- function(x)
do.call("measures", args = x)
output <- data.frame(FDR = numeric(), SN = numeric(), SP = numeric(),
n = integer(), p = integer(), graphType = character(),
alpha = numeric(), penalizeDiagonal = logical(), partial = logical(),
iterations = integer(), stringsAsFactors = FALSE)
for(r in 1:nrow(simulationMatrix))
{
simResults <-
}
specificDoCall <- function(x)
do.call("measures", args = x)
apply(foo, 1, specificDoCall)
apply(foo, 1, print)
apply(foo, 1, typeof)
apply(foo, 1, str)
Sys.getenv()
default.stringsAsFactors()
apply(foo, 1, str)
foo <- data.frame(list(x = 1:5, y = 5:10))
foo <- data.frame(list(x = 1:5, y = 5:19))
foo
foo <- data.frame(list(x = 1:5, y = 5:10))
foo <- data.frame(list(x = 1:5, y = 5:9))
foo
apply(foo, 2, mean)
apply(foo, 1, mean)
specificDoCall <- function(x)
do.call("measures", args = x)
foo <- createSimulationMatrix(nVec = c(100, 200), iterationsVec = 2)
foo
bar <- data.frame(list(x = 1:5, y = 5:9), z = c('a', "a", "v", 's', 'd')
bar <- data.frame(list(x = 1:5, y = 5:9), z = c('a', "a", "v", 's', 'd'))
bar(foo, 1, typeof)
apply(bar, 1, typeof)
bar <- array(list(x = 1:5, y = 5:9), z = c('a', "a", "v", 's', 'd'))
bar <- data.frame(list(x = 1:5, y = 5:9), z = c('a', "a", "v", 's', 'd'))
apply(bar, 1, typeof)
bar
bar <- data.frame(list(x = 1:5, y = 5:9), z = c("a", "b", "c", "d", 'e'))
apply(bar, 1, typeof)
bar <- data.frame(list(x = 1:5, y = 5:9), z = c("a", "b", "c", "d", 'e'))
apply(bar, 1, typeof)
bar <- data.frame(list(x = 1:5, y = 5:9), z = c("a", "b", "c", "d", 'e'))
apply(bar, 1, class)
bar <- data.frame(list(x = 1:5, y = 5:9), z = c("a", "b", "c", "d", 'e'))
apply(bar, 1, typeof)
bar <- list(list(x = 1:5, y = 5:9), z = c("a", "b", "c", "d", 'e'),
list(x = 11:15, y = 15:19), z = c("a", "b", "c", "d", 'e'))
bar
apply(bar, 1, typeof)
lapply(bar, typeof)
bar <- data.frame(list(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e')))
lapply(bar, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'))
lapply(bar, typeof)
bar
lapply(bar, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'))
apply(bar, 2, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'))
apply(bar, 1, typeof)
str(bar)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
apply(bar, 1, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
apply(bar, 2, typeof)
a = data.frame(t(iris[1:10,1:3]))
b = iris[1:10,1:3]
b
bar
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
apply(bar, 2, typeof)
bar
str(a)
iris
iris[1:10,1:3]
bar <- data.frame(x = 1:5, y = 5:9, stringsAsFactors = FALSE)
str(bar)
apply(bar, 2, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
apply(t(bar), 2, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
apply(t(bar), 1, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
lapply(t(bar), typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
lapply(bar, typeof)
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
lapply(bar, typeof)
lapply(t(bar), typeof)
bar
lapply(t(bar), typeof)
t(bar)
str(t(bar))
bar <- data.frame(x = 1:5, y = 5:9, z = c("a", "b", "c", "d", 'e'), stringsAsFactors = FALSE)
str(bar)
apply(bar, 2, typeof)
matrix(bar)
createSimulationMatrix()
matrix(createSimulationMatrix())
matrix(createSimulationMatrix(nVec = c(100:200)))
matrix(I(createSimulationMatrix(nVec = c(100:200))))
matrix(createSimulationMatrix(nVec = c(100:200)))
I(matrix(createSimulationMatrix(nVec = c(100:200))))
I(matrix(createSimulationMatrix(nVec = c(100,200))))
createSimulationMatrix(nVec = c(100,200))
foo <- createSimulationMatrix(nVec = c(100,200))
sapply(foo, print, simplify = FALSE)
sapply(foo, print, simplify = FALSE, USE.NAMES = FALSE)
sapply(foo, typeof, simplify = FALSE)
sapply(t(foo), typeof, simplify = FALSE)
sapply(foo, typeof, simplify = "array")
bar <- sapply(foo, typeof, simplify = "array")
bar
bar[1,1]
dim(bar)
typeof(bar)
sapply(foo, print, simplify = "array")
simulationMatrix
simulationMatrix[1,]
typeof(simulationMatrix[1,])
str(simulationMatrix[1,])
str(simulationMatrix)
str(foo)
typeof(fo[1,])
typeof(f0o[1,])
str(foo[1,])
as.vector(foo[1,])
str(as.vector(foo[1,]))
str(as.list(foo[1,]))
Rows()
Rows(foo)
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
simulationMatrix <- foo
simulationMatrix
specificDoCall(simulationMatrix[1,])
simulationMatrix <- createSimulationMatrix(nVec = c(100, 200), iterationsVec = 2)
specificDoCall(simulationMatrix[1,])
source("11 measures.R")
specificDoCall(simulationMatrix[1,])
additionalMethods = NULL
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, args = x)
specificDoCall(simulationMatrix[1,])
simulationMatrix[1,]
cbind(t(simulationMatrix[1,]), simulationMatrix[1,])
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPE/12 simulationsFunctions.R')
foo
simulations(foo)
foo <- createSimulationMatrix(nVec = c(100,200), iterationsVec = 2)
simulations(foo)
simulations <- function(simulationMatrix, additionalMethods = NULL)
{
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, verbose = FALSE, args = x)
output <- list()
# data.frame(FDR = numeric(), SN = numeric(), SP = numeric(),
#                  n = integer(), p = integer(), graphType = character(),
#                  alpha = numeric(), penalizeDiagonal = logical(), partial = logical(),
#                  iterations = integer(), stringsAsFactors = FALSE)
for(r in 1:nrow(simulationMatrix))
{
simResults <- specificDoCall(simulationMatrix[r,])
output[[r]] <- cbind(simResults, simulationMatrix[r,])
}
output <- do.call("rbind", output)
return(output)
}
simulations(foo)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPE/12 simulationsFunctions.R')
simulations(foo)
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPE/12 simulationsFunctions.R')
simulations(foo)
cat("Starting simulations\nnumber of setups = ", nrow(simulationMatrix))
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPE/12 simulationsFunctions.R')
cat("Starting simulations\nnumber of setups = ", nrow(simulationMatrix))
simulations(foo)
.Random.seed
sprintf('filename_%s', format(Sys.time(), '%y_%m_%d_%H_%M'))
format(Sys.time(), '%y_%m_%d_%H_%M')
foo
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/12 simulationsFunctions.R')
print0('Simulation_%s', format(Sys.time(), '%y_%m_%d_%H_%M'))
paste0('Simulation_%s', format(Sys.time(), '%y_%m_%d_%H_%M'))
sprintf('Simulation_%s', format(Sys.time(), '%y_%m_%d_%H_%M'))
foo <- createSimulationMatrix(nVec = c(100,200, 300))
foo
paste0("Simulation", format(Sys.time(), '%y_%m_%d_%H_%M', foo[1,]))
foo[1,]
paste0("Simulation", format(Sys.time(), '%y_%m_%d_%H_%M', as.vector(foo[1,])))
paste0("Simulation", format(Sys.time(), '%y_%m_%d_%H_%M', as.character(foo[1,])))
as.character(foo[1,])
paste0("Simulation", format(Sys.time(), '%y_%m_%d_%H_%M'), as.character(foo[1,]))
paste0("Simulation", format(Sys.time(), '%y_%m_%d_%H_%M'), paste0(foo[1,]))
paste(foo[1,])
paste(paste(foo[1,]))
sprintf(paste(foo[1,]))
sprintf(as.character(foo[1,]))
sprintf(as.vector(foo[1,]))
as.vector(foo[1,])
sprintf(as.vector(foo[[1],]))
sprintf(as.vector(foo[[1,]]))
sprintf(as.vector(foo[[1]]))
foo[[1]]
t(foo)[[1]]
t(foo)
foo[1]
foo
str(foo)
foo[,1]
foo[1,,]
paste(foo[1,,])
paste(foo[1,,], collapse = '|')
paste(foo[1,,], collapse = '_')
paste(foo[1,], collapse = '_')
as.list(foo[1,])
foo[1,]
simulationMatrix[r,]
simResults <- specificDoCall(foo[1,])
simulations <- function(simulationMatrix,
additionalMethods = NULL,
verbose = TRUE,
saveEach = FALSE)
{
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, verbose = FALSE, args = x)
if(verbose)
{
cat("Starting simulations\nnumber of setups = ", nrow(simulationMatrix), ".\n")
progressBar <- txtProgressBar(min = 0, max = nrow(simulationMatrix), style = 3)
setTxtProgressBar(progressBar, 0)
}
output <- list()
for(r in 1:nrow(simulationMatrix))
{
simResults <- specificDoCall(foo[1,])
output[[r]] <- cbind(simResults, simulationMatrix[r,])
if(saveEach)
{
filename <- paste0("Simulation",
# format(Sys.time(), '%y_%m_%d_%H_%M'),
paste(simulationMatrix[1,], collapse = '_'))
setup <- simulationMatrix[r,]
save(simResults, setup, file = "")
}
as.list(foo[1,])
if(verbose)
setTxtProgressBar(progressBar, r)
}
if(verbose)
close(progressBar)
output <- do.call("rbind", output)
return(output)
}
additionalMethods = NULL
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, verbose = FALSE, args = x)
output <- list()
simResults <- specificDoCall(foo[1,])
foo <- createSimulationMatrix(nVec = c(100,200, 300), iterationsVec = 2)
simResults <- specificDoCall(foo[1,])
output[[r]] <- cbind(simResults, simulationMatrix[r,])
output[[r]] <- cbind(simResults, foo[1,])
output[[1]] <- cbind(simResults, foo[1,])
output
filename <- paste0("Simulation",
# format(Sys.time(), '%y_%m_%d_%H_%M'),
paste(foo[1,], collapse = '_'))
filename
setup <- foo[1,]
setup
filename
simResults
save(simResults, setup, file = paste0("./!02 Data/", filename))
save(simResults, setup, file = paste0("./!02 Data/", filename, "RData"))
save(simResults, setup, file = paste0("./!02 Data/", filename, ".RData"),
)
save(simResults, setup, file = paste0("./!02 Data/", filename, ".RData"))
filename <- paste0("Simulation_",
# format(Sys.time(), '%y_%m_%d_%H_%M'),
paste(simulationMatrix[r,], collapse = '_'))
source("13 measures.R")
source("12 simulationsFunctions.R")
source("11 measures.R")
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/12 simulationsFunctions.R')
createSimulationMatrix <- function(nVec = 150,
pVec = 200,
graphTypeVec = "cluster",
alphaVec = .1,
penalizeDiagonalVec = FALSE,
partialVec = TRUE,
iterationsVec = 1000)
{
output <- expand.grid(nVec, pVec, graphTypeVec, alphaVec, penalizeDiagonalVec, partialVec, iterationsVec,
KEEP.OUT.ATTRS = FALSE, stringsAsFactors = FALSE)
colnames(output) <- c("n", "p", "graphType", "alpha", "penalizeDiagonal", "partial", "iterations")
return(output)
}
simulations <- function(simulationMatrix,
additionalMethods = NULL,
verbose = TRUE,
saveEach = FALSE)
{
specificDoCall <- function(x)
doCall("measures", additionalMethods = additionalMethods, verbose = FALSE, args = x)
if(verbose)
{
cat("Starting simulations\nnumber of setups = ", nrow(simulationMatrix), ".\n")
progressBar <- txtProgressBar(min = 0, max = nrow(simulationMatrix), style = 3)
setTxtProgressBar(progressBar, 0)
}
output <- list()
for(r in 1:nrow(simulationMatrix))
{
simResults <- specificDoCall(simulationMatrix[r,])
output[[r]] <- cbind(simResults, simulationMatrix[r,])
if(saveEach)
{
filename <- paste0("Simulation_",
# format(Sys.time(), '%y_%m_%d_%H_%M'),
paste(simulationMatrix[r,], collapse = '_'))
setup <- simulationMatrix[r,]
save(simResults, setup, file = paste0("./!02 Data/", filename, ".RData"))
}
if(verbose)
setTxtProgressBar(progressBar, r)
}
if(verbose)
close(progressBar)
output <- do.call("rbind", output)
return(output)
}
source("12 simulationsFunctions.R")
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/12 simulationsFunctions.R')
e# Written by Michał Makowski
require(glasso)
source("12 simulationsFunctions.R")
createSimulationMatrix(nVec = 150,
pVec = 200,
graphTypeVec = "cluster",
alphaVec = 0.05,
penalizeDiagonalVec = FALSE,
partialVec = FALSE,
iterationsVec = c(10, 50, 100, 300, 625, 1250, 2500))
simulations <- function(simulationMatrix, additionalMethods = NULL, verbose = TRUE)
{
}
createSimulationMatrix(nVec = 150,
pVec = 200,
graphTypeVec = "cluster",
alphaVec = 0.05,
penalizeDiagonalVec = FALSE,
partialVec = FALSE,
iterationsVec = c(10, 50, 100, 300, 625, 1250, 2500))
simulations
createSimulationMatrix(nVec = 150,
pVec = 200,
graphTypeVec = "cluster",
alphaVec = 0.05,
penalizeDiagonalVec = FALSE,
partialVec = FALSE,
iterationsVec = c(10, 50, 100, 300, 625, 1250, 2500))
source("12 simulationsFunctions.R")
iterationsTest <- createSimulationMatrix(nVec = 150,
pVec = 200,
graphTypeVec = "cluster",
alphaVec = 0.05,
penalizeDiagonalVec = FALSE,
partialVec = FALSE,
iterationsVec = c(10, 50, 100, 300, 625, 1250, 2500))
iterationsTest
additional <- list(list(method = "mb", criterion = "stars"),
list(method = "mb"),
list(method = "glasso", criterion = "stars"),
list(method = "glasso"),
list(method = "glasso", criterion = "ebic"))
additional
source('C:/Users/Michal/Dropbox/01 Studia/04 Praca magisterska/gSLOPEtesting/12 simulationsFunctions.R')
measures(additionalMethods = additional)
measures(additionalMethods = additional, iterations = 2)
names()
names(additional)
additional <- list(starsMB = list(method = "mb", criterion = "stars"),
ricMB = list(method = "mb"),
starsgLASSO = list(method = "glasso", criterion = "stars"),
ricgLASSO = list(method = "glasso"),
ebicgGLASSO = list(method = "glasso", criterion = "ebic"))
names(additional)
measures(additionalMethods = additional, iterations = 2)
source("12 simulationsFunctions.R")
iterationsTest <- createSimulationMatrix(nVec = 150,
pVec = 200,
graphTypeVec = "cluster",
alphaVec = 0.05,
penalizeDiagonalVec = FALSE,
partialVec = FALSE,
iterationsVec = c(10, 50, 100, 300, 625, 1250, 2500))
additional <- list(starsMB = list(method = "mb", criterion = "stars"),
ricMB = list(method = "mb"),
starsgLASSO = list(method = "glasso", criterion = "stars"),
ricgLASSO = list(method = "glasso"),
ebicgGLASSO = list(method = "glasso", criterion = "ebic"))
names(additional)
measures(additionalMethods = additional, iterations = 2)
iterationsMatrix <- createSimulationMatrix(nVec = 150,
pVec = 200,
graphTypeVec = c("hub", "cluster"),
alphaVec = c(0.1, 0.05, 0.01),
penalizeDiagonalVec = FALSE,
partialVec = FALSE,
iterationsVec = c(10, 50, 100, 300, 625, 1250, 2500))
iterationsMatrix
